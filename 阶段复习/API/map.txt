#Map---查找表
java.util.Map接口
	Map是常用的一组数据结构，样子像是一个多行两列的表格
	左列称为key，右列称为value

	Map总是根据key来获取对应的value，并且Map有一个强制的要求
	key是不允许重复的(equals比较)

常用实现类
java.util.HashMap;称为哈希表或者散列表，是当今查询速度最快的数据结构
	V put（K k, V v)；
	将给定的一组键值对存入map中,
	由于Map要求key不能重复，因此若使用Map已经存在key再存放
	value则是替换value操作，调用返回值为该key存放的value值，
	如果给定的key不存在则返回null

	V get(object k);
	根据给定的key获取对应的value，若给定的key不存在则返回null

	V remove(object k);
	从Map中删除给定的key对应的这组键值对，返回值为该key对应的value

Map的遍历
1.遍历所有key：
	Set keySet();
	将当前Map中所有的key以一个Set集合形式返回，
	遍历该集合等同遍历所有key
	Set<String>keySet = map.keySet();
	for(String key:keySet) {
		System.out.println("key:"+key);
	}
2.遍历每一组键值对
	Set entrySet();
	将当前Map中每组键值对(若干的Entry实例)以一个Set集合返回
	java.util.Map.Entry
	Entry的每一个实例表示Map的一组键值对
	Set<Entry<String,Integer>>entrySet = map.entrySet();
	for(Entry<String,Integer>e:entrySet) {
		String key = e.getKey();
		Integer value = e.getValue();
		System.out.println(key+":"+value);
	}	
3.遍历所有value
	Collection values();
	将当前Map追踪所有value以一个集合形式返回
	Collection<Integer>values=map.values();
	for(Integer value:values){
		System.out.println("value："+value);
	}











